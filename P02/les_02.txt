-- ppt[8]
CREATE OR REPLACE FUNCTION get_sal
 (p_id employees.employee_id%TYPE) RETURN NUMBER IS
  v_sal employees.salary%TYPE := 0;
  BEGIN
    SELECT salary
    INTO   v_sal
    FROM   employees         
    WHERE  employee_id = p_id;
    RETURN v_sal;
  END get_sal; 
/
-- Invoke the function as an expression or as
-- a parameter value.

EXECUTE dbms_output.put_line(get_sal(100))

-- ppt[9]
-- As a PL/SQL expression, get the results using host variables

VARIABLE b_salary NUMBER
EXECUTE :b_salary := get_sal(100)
print b_salary

-- As a PL/SQL expression, get the results using a local 
-- variable
SET SERVEROUTPUT ON
DECLARE
  sal employees.salary%type;
BEGIN
  sal := get_sal(100);
  DBMS_OUTPUT.PUT_LINE('The salary is: '|| sal);
END;
/


-- ppt[10]
-- Use as a parameter to another subprogram
EXECUTE dbms_output.put_line(get_sal(100))

-- Use in a SQL statement (subject to restrictions)

SELECT job_id, get_sal(employee_id) 
FROM employees;

-- ppt[14]
CREATE OR REPLACE FUNCTION tax(p_value IN NUMBER)
 RETURN NUMBER IS
BEGIN
   RETURN (p_value * 0.08);
END tax;
/
SELECT employee_id, last_name, salary, tax(salary) taxs
FROM   employees
WHERE  department_id = 100;

-- ppt[18]
CREATE OR REPLACE FUNCTION dml_call_sql(p_sal NUMBER)
   RETURN NUMBER IS
BEGIN
  INSERT INTO employees(employee_id, last_name, email, hire_date, job_id, salary)
  VALUES(1, 'Frost', 'jfrost@company.com', SYSDATE, 'SA_MAN', p_sal);
  RETURN (p_sal + 100);
END;
/
UPDATE employees
  SET salary = dml_call_sql(2000)
WHERE employee_id = 170;

-- ppt[20]
CREATE OR REPLACE FUNCTION f(
  p_parameter_1 IN NUMBER DEFAULT 1,
  p_parameter_5 IN NUMBER DEFAULT 5) 
RETURN NUMBER
IS
 v_var number;
BEGIN
  v_var := p_parameter_1 + (p_parameter_5 * 2);
  RETURN v_var;
END f;
/

SELECT f(p_parameter_5 => 10) FROM DUAL;

-- ppt[21]
DROP FUNCTION f;


-- ppt[22]
DESCRIBE USER_SOURCE

SELECT  text
FROM    user_source
WHERE   type = 'FUNCTION'
ORDER   BY line;



ppt [28]

create or replace function get_location(p_deptname in varchar2) 
return varchar2 
as
 v_loc_id number;
 v_city varchar2(30);
begin
 select d.location_id, l.city
 into v_loc_id, v_city
 from departments d, locations l
 where upper(department_name) = upper(p_deptname)
 and   d.location_id = l.location_id;
 
 return v_city;
end;
/

create or replace procedure emp_list (p_maxrows number)
is
 cursor cur_emp is
 select d.department_name, e.employee_id, e.last_name, e.salary, e.commission_pct
 from departments d, employees e
 where d.department_id = e.department_id;
 rec_emp cur_emp%rowtype;
 type emp_tab_type is table of cur_emp%rowtype index by binary_integer;
 emp_tab emp_tab_type;
 i number:=1;
 v_city varchar(30);
begin
 open cur_emp;
 fetch cur_emp into rec_emp;
 emp_tab(i):=rec_emp;
 while (cur_emp%found) and (i<=p_maxrows) loop
  i:=i+1;
  fetch cur_emp into rec_emp;
  emp_tab(i):=rec_emp;
  v_city:=get_location(rec_emp.department_name);
  dbms_output.put_line('Employee '||rec_emp.last_name || ' works in '|| v_city);
 end loop;
 close cur_emp;
 for j in reverse 1..i loop
  dbms_output.put_line(emp_tab(j).last_name);
 end loop;
end emp_list;
/


