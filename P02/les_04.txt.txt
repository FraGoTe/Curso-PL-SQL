-- ppt[6]
CREATE OR REPLACE PACKAGE dept_pkg IS
  PROCEDURE add_department(p_deptno departments.department_id%TYPE, p_name departments.department_name%TYPE :='unknown', p_loc  departments.location_id%TYPE := 1700);

  PROCEDURE add_department
   (p_name departments.department_name%TYPE :='unknown',
    p_loc  departments.location_id%TYPE := 1700);
END dept_pkg;
/


-- ppt[7]
-- Package body of package defined on previous slide. 
CREATE OR REPLACE PACKAGE BODY dept_pkg  IS
PROCEDURE add_department –- First procedure’s declaration
  (p_deptno departments.department_id%TYPE,
   p_name   departments.department_name%TYPE := 'unknown',
   p_loc    departments.location_id%TYPE := 1700) IS
  BEGIN
    INSERT INTO departments(department_id, 
      department_name, location_id)
    VALUES  (p_deptno, p_name, p_loc);
  END add_department;

PROCEDURE add_department –- Second procedure’s declaration
  (p_name   departments.department_name%TYPE := 'unknown',
   p_loc    departments.location_id%TYPE := 1700) IS
  BEGIN
    INSERT INTO departments (department_id,
      department_name, location_id)
    VALUES (departments_seq.NEXTVAL, p_name, p_loc);
  END add_department;
 END dept_pkg; 
/

-- ppt[11]
CREATE OR REPLACE PACKAGE taxes IS
  v_tax   NUMBER;
  ...  -- declare all public procedures/functions
END taxes;
/
CREATE OR REPLACE PACKAGE BODY taxes IS
  ... -- declare all private variables
  ... -- define public/private procedures/functions
 BEGIN
   SELECT   rate_value INTO v_tax
   FROM     tax_rates
   WHERE    rate_name = 'TAX';
END taxes;
/


-- ppt[14]
CREATE OR REPLACE PACKAGE taxes_pkg IS
  FUNCTION tax (p_value IN NUMBER) RETURN NUMBER;
END taxes_pkg;
/
CREATE OR REPLACE PACKAGE BODY taxes_pkg IS
  FUNCTION tax (p_value IN NUMBER) RETURN NUMBER IS
    v_rate NUMBER := 0.08;
  BEGIN
    RETURN (p_value * v_rate);
  END tax;
END taxes_pkg;
/

SELECT taxes_pkg.tax(salary), salary, last_name
FROM   employees;


-- ppt[19,20]
CREATE OR REPLACE PACKAGE curs_pkg IS
  PROCEDURE open;
  FUNCTION next(p_n NUMBER := 1) RETURN BOOLEAN;
  PROCEDURE close;
END curs_pkg;

CREATE OR REPLACE PACKAGE BODY curs_pkg IS 
  CURSOR cur_c IS 
    SELECT employee_id FROM employees;
  PROCEDURE open IS  
  BEGIN  
    IF NOT cur_c%ISOPEN THEN   
      OPEN cur_c;  
    END IF;
  END open;
    FUNCTION next(p_n NUMBER := 1) RETURN BOOLEAN IS
    v_emp_id employees.employee_id%TYPE;
  BEGIN
    FOR count IN 1 .. p_n LOOP
      FETCH cur_c INTO v_emp_id; 
      EXIT WHEN cur_c%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE('Id: ' ||(v_emp_id));
    END LOOP;
    RETURN cur_c%FOUND;
  END next;
  PROCEDURE close IS 
    BEGIN
      IF cur_c%ISOPEN THEN  
        CLOSE cur_c;  
      END IF;
    END close;
END curs_pkg;


set serveroutput on
execute curs_pkg.open;
declare
 v_more boolean:=curs_pkg.next(3);
begin
 if not v_more then
   curs_pkg.close;
 end if;
end;

CREATE OR REPLACE PACKAGE emp_pkg IS
  TYPE emp_table_type IS TABLE OF employees%ROWTYPE
     INDEX BY BINARY_INTEGER;
  PROCEDURE get_employees(p_emps OUT emp_table_type);
END emp_pkg;

CREATE OR REPLACE PACKAGE BODY emp_pkg IS
  PROCEDURE get_employees(p_emps OUT emp_table_type) IS
    v_i BINARY_INTEGER := 0;
  BEGIN
    FOR emp_record IN (SELECT * FROM employees) 
    LOOP
      p_emps(v_i) := emp_record;
      v_i:= v_i + 1;
    END LOOP;
  END get_employees;
END emp_pkg;